package main

import (
	"fmt"
	"strings"
	"text/tabwriter"
)

func objToStruct(name string, schema Schema) (res []string) {
	if schema.Type != "object" {
		panic("only object schemas")
	}
	if name == "" {
		name = "Autogenerated"
	}
	buf := new(strings.Builder)
	w := tabwriter.NewWriter(buf, 0, 0, 0, ' ', 0)
	fmt.Fprintf(w, "type %s struct {\n", name)
	for propName, propSchema := range schema.Properties {
		field := toCamel(propName)
		typ := toGoType(propSchema)
		jsonTag := toJSONTag(propName)
		if propSchema.Type == "object" {
			fmt.Fprintf(w, "    %s \t%s \t%s\n", field, field, jsonTag)
			res = append(res, objToStruct(toCamel(propName), propSchema)...)
		} else {
			fmt.Fprintf(w, "    %s \t%s \t%s\n", field, typ, jsonTag)
		}
	}
	fmt.Fprintf(w, "}\n")
	w.Flush()
	return append(res, buf.String())
}

func toGoType(schema Schema) (goType string) {
	switch schema.Type {
	case "string", "number", "integer", "boolean":
		goType = goTypes[schema.Type]
	case "array":
		itemTyp := (*schema.Items).Type
		goType = "[]" + goTypes[itemTyp]
	}
	return goType
}

var goTypes = map[string]string{
	"string":  "string",
	"number":  "int",
	"integer": "int",
	"boolean": "bool",
}

func toCamel(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = strings.Title(parts[i])
	}
	return strings.Join(parts, "")
}

func toJSONTag(name string) string {
	return fmt.Sprintf("`json:\"%s\"`", name)
}

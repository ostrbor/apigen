package main

import (
	"fmt"
	"io"
	"os"
	"strings"
	"text/tabwriter"
	"text/template"
)

type goStruct struct {
	Name   string
	Fields []goField
}

type goField struct {
	Name   string
	Typ    string
	JSName string
}

// func toGoStructs converts an OpenAPI Schema into Go structs.
func toGoStruct(name string, schema Schema) (res []goStruct) {
	if schema.Type != "object" {
		panic("toGoStruct only supports object schemas")
	}
	if name == "" {
		name = "Autogenerated"
	}
	st := goStruct{Name: name}
	for propName, propSchema := range schema.Properties {
		if propSchema.Type == "object" {
			st.Fields = append(st.Fields, goField{
				Name:   toCamel(propName),
				Typ:    toCamel(propName),
				JSName: propName,
			})
			res = append(res, toGoStruct(toCamel(propName), propSchema)...)
		} else {
			st.Fields = append(st.Fields, goField{
				Name:   toCamel(propName),
				Typ:    toGoType(propSchema),
				JSName: propName,
			})
		}
	}
	res = append(res, st)
	return res
}

func toGoType(schema Schema) (goType string) {
	switch schema.Type {
	case "string", "number", "integer", "boolean":
		goType = goTypes[schema.Type]
	case "array":
		itemTyp := (*schema.Items).Type
		goType = "[]" + goTypes[itemTyp]
	}
	return goType
}

var goTypes = map[string]string{
	"string":  "string",
	"number":  "int",
	"integer": "int",
	"boolean": "bool",
}

func toCamel(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = strings.Title(parts[i])
	}
	return strings.Join(parts, "")
}

func generateCode(s goStruct) string {
	f, err := os.Open("struct.tmpl")
	if err != nil {
		panic(err)
	}
	defer f.Close()
	text, err := io.ReadAll(f)
	if err != nil {
		panic(err)
	}
	tmpl := template.New("GoStruct")
	tmpl, err = tmpl.Parse(string(text))
	if err != nil {
		panic(err)
	}
	buf := new(strings.Builder)
	err = tmpl.Execute(buf, s)
	if err != nil {
		panic(err)
	}
	return buf.String()
}

func objToStruct(name string, schema Schema) (res []string) {
	if schema.Type != "object" {
		panic("only object schemas")
	}
	if name == "" {
		name = "Autogenerated"
	}
	buf := new(strings.Builder)
	w := tabwriter.NewWriter(buf, 0, 0, 0, ' ', 0)
	fmt.Fprintf(w, "type %s struct {\n", name)
	for propName, propSchema := range schema.Properties {
		if propSchema.Type == "object" {
			fmt.Fprintf(w, "    %s \t%s \t%s\n", toCamel(propName), toCamel(propName), toJSONTag(propName))
			res = append(res, objToStruct(toCamel(propName), propSchema)...)
		} else {
			fmt.Fprintf(w, "    %s \t%s \t%s\n", toCamel(propName), toGoType(propSchema), toJSONTag(propName))
		}
	}
	fmt.Fprintf(w, "}\n")
	w.Flush()
	return append(res, buf.String())
}

func toJSONTag(name string) string {
	return fmt.Sprintf("`json:\"%s\"`", name)
}

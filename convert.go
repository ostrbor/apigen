package main

import "strings"

type goStruct struct {
	name   string
	fields []goField
}

type goField struct {
	name    string
	typ     string
	jsonTag string
}

// func toGoStructs converts an OpenAPI Schema into Go structs.
func toGoStruct(name string, schema Schema) (res []goStruct) {
	if schema.Type != "object" {
		panic("toGoStruct only supports object schemas")
	}
	if name == "" {
		name = "Autogenerated"
	}
	st := goStruct{name: name}
	for propName, propSchema := range schema.Properties {
		if propSchema.Type == "object" {
			st.fields = append(st.fields, goField{
				name:    snakeToCamel(propName),
				typ:     snakeToCamel(propName),
				jsonTag: propName,
			})
			res = append(res, toGoStruct(snakeToCamel(propName), propSchema)...)
		} else {
			st.fields = append(st.fields, goField{
				name:    snakeToCamel(propName),
				typ:     toGoType(propSchema),
				jsonTag: propName,
			})
		}
	}
	res = append(res, st)
	return res
}

func toGoType(schema Schema) (goType string) {
	switch schema.Type {
	case "string", "number", "integer", "boolean":
		goType = goTypes[schema.Type]
	case "array":
		itemTyp := (*schema.Items).Type
		goType = "[]" + goTypes[itemTyp]
	}
	return goType
}

var goTypes = map[string]string{
	"string":  "string",
	"number":  "int",
	"integer": "int",
	"boolean": "bool",
}

func snakeToCamel(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = strings.Title(parts[i])
	}
	return strings.Join(parts, "")
}

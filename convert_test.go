package main

import (
	"gopkg.in/yaml.v2"
	"testing"
)

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func TestConvert(t *testing.T) {
	yamlSchema := `
type: object
properties:
  str:
   type: string
  int:
    type: integer
  bool:
    type: boolean
  arr:
    type: array
    items:
      type: string
  obj:
    type: object
    properties:
      name:
        type: string
`
	var schema Schema
	err := yaml.Unmarshal([]byte(yamlSchema), &schema)
	check(err)
	ss := toGoStruct("", schema)
	if len(ss) != 2 {
		t.Fatalf("expected 1 struct, got %d", len(ss))
	}
	for _, s := range ss {
		if s.Name == "Autogenerated" {
			if len(s.Fields) != 5 {
				t.Errorf("expected 5 fields in autogenerated struct, got %d", len(s.Fields))
			}
		} else if s.Name == "Obj" {
			if len(s.Fields) != 1 {
				t.Errorf("expected 1 field in Obj struct, got %d", len(s.Fields))
			}
		} else {
			t.Errorf("unexpected struct name: %s", s.Name)
		}
	}
}

func Test_generateCode(t *testing.T) {
	yamlSchema := `
type: object
properties:
  str:
   type: string
  int:
    type: integer
  bool:
    type: boolean
  arr:
    type: array
    items:
      type: string
  obj:
    type: object
    properties:
      name:
        type: string
`
	var schema Schema
	err := yaml.Unmarshal([]byte(yamlSchema), &schema)
	check(err)
	ss := toGoStruct("", schema)
	for _, s := range ss {
		println(generateCode(s))
	}
}

func Test_toGoStruct2(t *testing.T) {
	yamlSchema := `
type: object
properties:
  str:
   type: string
  int:
    type: integer
  bool:
    type: boolean
  arr:
    type: array
    items:
      type: string
  obj:
    type: object
    properties:
      name:
        type: string
`
	var schema Schema
	err := yaml.Unmarshal([]byte(yamlSchema), &schema)
	check(err)
	ss := objToStruct("", schema)
	for _, s := range ss {
		println(s)
	}
}
